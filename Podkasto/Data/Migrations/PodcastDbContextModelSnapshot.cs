// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Podkasto.Data;

#nullable disable

namespace Podkasto.Data.Migrations
{
    [DbContext(typeof(PodcastDbContext))]
    partial class PodcastDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("Podkasto.Models.Category", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = new Guid("fb866ceb-63ed-4b11-825b-201a61c89c47"),
                            Genre = "Comedy"
                        });
                });

            modelBuilder.Entity("Podkasto.Models.Episode", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("EpisodeURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Explicit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaURI")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PodcastID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PodcastID");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("Podkasto.Models.Feed", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("FeedType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Feeds");

                    b.HasData(
                        new
                        {
                            ID = new Guid("9d41d750-3907-4adf-9095-1d6f17a5d254"),
                            FeedType = 0,
                            URL = "http://feeds.codenewbie.org/cnpodcast.xml"
                        });
                });

            modelBuilder.Entity("Podkasto.Models.FeedCategory", b =>
                {
                    b.Property<Guid>("FeedID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("TEXT");

                    b.HasKey("FeedID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("FeedCategory");

                    b.HasData(
                        new
                        {
                            FeedID = new Guid("9d41d750-3907-4adf-9095-1d6f17a5d254"),
                            CategoryID = new Guid("fb866ceb-63ed-4b11-825b-201a61c89c47")
                        });
                });

            modelBuilder.Entity("Podkasto.Models.Podcast", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FeedID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("PodcastTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("FeedID")
                        .IsUnique();

                    b.ToTable("Podcast");
                });

            modelBuilder.Entity("Podkasto.Models.Episode", b =>
                {
                    b.HasOne("Podkasto.Models.Podcast", "Podcast")
                        .WithMany("Episodes")
                        .HasForeignKey("PodcastID");

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("Podkasto.Models.FeedCategory", b =>
                {
                    b.HasOne("Podkasto.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Podkasto.Models.Feed", null)
                        .WithMany("Categories")
                        .HasForeignKey("FeedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Podkasto.Models.Podcast", b =>
                {
                    b.HasOne("Podkasto.Models.Feed", "Feed")
                        .WithOne("Podcast")
                        .HasForeignKey("Podkasto.Models.Podcast", "FeedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("Podkasto.Models.Feed", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("Podkasto.Models.Podcast", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
